[[ no_optimize ]]

import header

import tea.green.fmt
import tea.green.defined
import tea.green.type
import tea.green.string
import tea.green.char
import tea.green.term
import tea.green.process

enum ProgrammingLanguages = int8 {
    Gretea,
    Cpp,
    C,
    Rust,
    Kalem
}

alias linker = cpp

var today: int8 = 21

struct Test {
    mut name   : string [[ default = "Foo" ]] \
    mut surname: string [[ default = "Foo" ]] \
    mut age    : int64  [[ default = 16    ]]
}

struct MyData<Data> {
    mut data   : Data
}

fn test(pi: double) {
    [[ cpp ]] { std::cout << "Green tea\n" << pi << '\n' ; }

    . _ // return _
}

fn hmm() = int8 {
       . today + 12
    // ^ ^^^^^
    // return today
    // -----------
    // return and .<ws> are same thing, however
    // return can be used by general,
    // .<ws> can be used by declared variables.
}

fn is_this_linux() = string {
    if os == "gnu/linux" {
        . "hmm yes"
    }

    . "hmm no"
}

fn main() = int {
    [[ runtime ]] {
        set HOME as env "HOME" \

        println "Your home path: {HOME}"
    }

    term#clear()
    term#disable_cursor()

    var pi: double    = 3.14        // immutable
    var three         = 3           // immutable, without type declaration
    var mut green_tea = ProjectName // mutable, without type declaration

    var mut tea: string   = "green"
    var gt     : string   = "gREEnTeA"

    var __true            = true
    var __false           = false
    var mut x      : int8 = 0

    var mut foo           = 0

    [[ unsafe ]] {
        [[ assembly ]] {
            add %1, %0 \

            ?_ \
                : "+r" (foo) : "g" (three) : "cc" \
            _?
        }
    }

    fmt#println(foo)

    fmt#print("L")

    for _ {
        if x != 4 { 
            fmt#print("o")
            x += 1
            continue
        }

        fmt#println("p")
        break
    }

    // x = x >> 2
    // x = x << 2

    // optimize statements
    if __true == true {
        fmt#println("ok")
    }

    // optimize statements
    if __false != false {
        fmt#println("ok.")
    }

    fmt#println(cpp_str#at(tea, 1), str#append( tea, "tea" ))

    var mut __Test    = Test {
        name   : "Ferhat"   \
        surname: "Geçdoğan" \
    }

    fmt#println(__Test.name,
                "\n",
                __Test.surname,
                "\n",
                __Test.age)

    fmt#println(is_this_linux(), hmm())
 
    fmt#println(ch#upper(str#first(tea)))
    fmt#println(ch#upper(str#last(tea)))

    if green_tea == "gretea" {
        fmt#println("Greentea")
    } else if green_tea == "green tea" {
        fmt#println("Green tea")
    } else {
        fmt#println("Black tea")
    }

    for character in tea {
        fmt#println(character)
    }

    fmt#println(os)
    fmt#println(arch)

    fmt#println(process#env("HOME"))

    process#execute("uname")

    `if defined(gnu_linux) {
        fmt#println("GNU/Linux")
    } `else if defined(freebsd) {
        fmt#println("FreeBSD")
    } `else {
        fmt#println("Undetected OS")
    } @

    fmt#println(str#capitalize(gt))

    fmt#println("\x1b[0;93mhmm...\x1b[0m")

    term#enable_cursor()

    process#exit(process_success)
}