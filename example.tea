import header
alias linker = cpp

var today: int = 21

module fmt {
    fn fmt#__print<T>(argument: T) {
        cpp {
            std::cout << argument ;
        }
    }

    fn fmt#println<'lol>(args: lol) {
        // +_ is unpack operator for variadic variables.
        __print(args, +_)
        __print("\n"    )
    }
}

fn test(pi: double) {
    cpp { std::cout << "Green tea\n" << pi << '\n' ; }

    . _ // return _
}

fn hmm() = int {
       . today
    // ^ ^^^^^
    // return today
    // -----------
    // return and .<ws> are same thing, however
    // return can be used by general,
    // .<ws> can be used by declared variables.
}

fn main() = int {
    var pi: double    = 3.14        // immutable
    var three         = 3           // immutable, without type declaration
    var mut green_tea = ProjectName // mutable, without type declaration

    test(pi)

    if green_tea == "gretea" {
        fmt#println("Greentea")
    } else if green_tea == "green tea" {
        fmt#println("Green tea")
    } else {
        fmt#println("Black tea")
    }

    fmt#println(green_tea)

    . 0
}