[[ no_optimize ]]
[[ test ]]

import header

import tea.green.fmt
import tea.green.defined
import tea.green.type
import tea.green.string
import tea.green.char
import tea.green.term
import tea.green.process
import tea.green.expr
import tea.green.color
import tea.green.log
import tea.green.bufsize
import tea.green.escape

import tea.black.vector
import tea.black.sstream

enum ProgrammingLanguages = int8 {
    Gretea,
    Cpp,
    C,
    Rust,
    Kalem
}

alias linker = cpp

var today: int8 = 21

struct Test {
    mut name   : string [[ default = "Foo" ]] \
    mut surname: string [[ default = "Foo" ]] \
    mut age    : int64  [[ default = 16    ]]
}


compile default for string {
    "\'default\' is much better & faster way to assign a data when you work with same variable types"
}

compile default for int8 {
    42
}


struct MyData<Data> {
    mut data   : Data
}

fn test(pi: double) {
    [[ cpp ]] {  std::cout << "Green tea\n" << pi << '\n' ;  }

    . _ // return _
}

// = []string
fn token()
{
    var mut test: []string = {
        "fn" \
        "test" \
        "(" \
        ")" \
        "=" \
        "[]" \
        "string" \
    }

    for arg in test {
        fmt#println("token:", arg)
    }

    // return test;
}

fn hmm() = int8 {
       . today + 12
    // ^ ^^^^^
    // return today
    // -----------
    // return and .<ws> are same thing, however
    // return can be used by general,
    // .<ws> can be used by declared variables.
}

fn is_this_linux() = string {
    if os == "gnu/linux" {
        . "hmm yes"
    }

    . "hmm no"
}

fn compile_for_return_test() = string {
    return [[ default ]]
}

fn main() = int {
    [[ include_args ]]

    fmt#println(argc, __newline__, arguments[0])

    fmt#println(compile_for_return_test())
    var mut split_test: []string = [[ unsafe ]]

    split_test = str#split("test.test.test2.test3", '.' );

    for val in split_test {
        fmt#println(val)
    }

    [[ runtime ]] {
        set HOME as env "HOME" \

        println "Your home path: {HOME}"
    }

    term#clear()
    term#disable_cursor()
    var pi: double    = 3.14        // immutable
    var three         = 3           // immutable, without type declaration
    var mut green_tea = ProjectName // mutable, without type declaration

    var mut tea: string   = "green"
    var gt     : string   = "gREEnTeA"

    if gt[0] == 'g' {
        fmt#println(gt[0])
    }

    var __true            = true
    var __false           = false
    var mut x      : int8 = 0

    let mut foo           = 0
 // ^^^
 // 'let' and 'var' are same things (GreteaKeywords::Var)

    let end: char = '\0'
    var empty_str: string = ""

    var term_buf_size: BufSize = [[ default ]]

    fmt#println(
        term_buf_size.columns,
        '\w' ,
        term_buf_size.rows
    )

    var hahahaha: string = [[ default ]]
    var hahaha  : int8   = [[ default ]]

    var mut test: int8   = [[ unsafe ]]
    // ^^^^^ (uninitialized value)

    if str#is_empty(empty_str) {
        fmt#println("yes")
    }

    fmt#println(hahahaha, "\n", hahaha)

    var escape_seq: string = "escafe\\wis\\winteresting\\n\\x1b[0;33mtest\\x1b[0m\\n\\\\"

    fmt#println("test", '\w' , type escape_seq)

    compile default for _ {
        is_this_linux()
    }

    var lets_find_out: _ = [[ default ]]

    fmt#println(lets_find_out)

    fmt#println(escape#run(escape_seq))

    [[ unsafe ]] {
        [[ assembly ]] {
            add %1, %0 \

            ?_ \
                : "+r" (foo) : "g" (three) : "cc" \
            _?
        }

        [[ safe ]] {
            fmt#println("unsafe to safe")
        }
    }

    fmt#print("L")

    for _ {
        if x != 4 {
            fmt#print("o")
            x += 1
            continue
        }

        fmt#println("p")
        break
    }

    fmt#print("L")

    while x != 8 {
        fmt#print("o")
        x += 1
    } fmt#println("p")

    // x = x >> 2
    // x = x << 2

    // optimize statements
    if __true == true {
        fmt#println("ok")
    }

    // optimize statements
    if __false != false {
        fmt#println("ok.")
    }

    fmt#println(cpp_str#at(tea, 1), str#append( tea, "tea" ))

    var mut __Test    = Test {
        name   : "Ferhat"   \
        surname: "Geçdoğan" \
    }

    fmt#println(__Test.name,
                "\n",
                __Test.surname,
                "\n",
                __Test.age)

    fmt#println(is_this_linux(), hmm())

    fmt#println(ch#upper(str#first(tea)))
    fmt#println(ch#upper(str#last(tea)))

    if green_tea == "gretea" {
        fmt#println("Greentea")
    } else if green_tea == "green tea" {
        fmt#println("Green tea")
    } else {
        fmt#println("Black tea")
    }

    for character in tea {
        fmt#println(character)
    }

    fmt#println(os)
    fmt#println(arch)

    fmt#println(process#env("HOME"))

    process#execute("uname")

    `if defined(gnu_linux) {
        fmt#println("GNU/Linux")
    } `else if defined(freebsd) {
        fmt#println("FreeBSD")
    } `else {
        fmt#println("Undetected OS")
    } @

    fmt#println(str#capitalize(gt))

    fmt#println("\x1b[0;93mhmm...\x1b[0m")

    term#enable_cursor()

    token()

    fmt#println(expr#eval("6 - 2 * 3 / 3 + 2 - 3"))

    color#print("Hello much better & colorful text.\n", LightGreen, Bold)

    log#print(
        Info, "Blah blah is deprecated. Use blah instead."
    )

    log#print(
        Warning, "Blah blah is unused."
    )

    log#print(
        Error, "There's no \'\\n\' or \';\' after \'return\'"
    )

    log#print(
        Help, "Remove \'=\' after function definition (no_return)."
    )

    process#exit(process_success)
}
